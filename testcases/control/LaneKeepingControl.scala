import daisy.lang._
import Real._

object LaneKeepingControl {

  def next_x1(x1: Real, x2: Real, x3: Real, x4: Real, u: Real): Real = {
    require(0.0261 <= x1 && x1 <= 1 && -10.6281 <= x2 && x2 <= 1.3480 && -0.4325 <= x3 && x3 <= 0.0835 && -5.2947 <= x4 && x4 <= 2.7282 && -3.6127 <= u && u <= 2.2344)
    val res = (1.0000000000) * x1 + (0.0185000000) * x2 + (0.0221000000) * x3 + (0.0003019500) * x4 + (0.0134000000) * u
    res
  }

  def next_x2(x1: Real, x2: Real, x3: Real, x4: Real, u: Real): Real = {
    require(0.0261 <= x1 && x1 <= 1 && -10.6281 <= x2 && x2 <= 1.3480 && -0.4325 <= x3 && x3 <= 0.0835 && -5.2947 <= x4 && x4 <= 2.7282 && -3.6127 <= u && u <= 2.2344)
    val res = (0.0000000000) * x1 + (0.8564000000) * x2 + (2.1540000000) * x3 + (0.0361000000) * x4 + (1.3068000000) * u
    res
  }

  def next_x3(x1: Real, x2: Real, x3: Real, x4: Real, u: Real): Real = {
    require(0.0261 <= x1 && x1 <= 1 && -10.6281 <= x2 && x2 <= 1.3480 && -0.4325 <= x3 && x3 <= 0.0835 && -5.2947 <= x4 && x4 <= 2.7282 && -3.6127 <= u && u <= 2.2344)
    val res = (0.0000000000) * x1 + (0.0000828350) * x2 + (0.9998000000) * x3 + (0.0186000000) * x4 + (0.0068000000) * u
    res
  }

  def next_x4(x1: Real, x2: Real, x3: Real, x4: Real, u: Real): Real = {
    require(0.0261 <= x1 && x1 <= 1 && -10.6281 <= x2 && x2 <= 1.3480 && -0.4325 <= x3 && x3 <= 0.0835 && -5.2947 <= x4 && x4 <= 2.7282 && -3.6127 <= u && u <= 2.2344)
    val res = (0.0000000000) * x1 + (0.0079000000) * x2 + (-0.1181000000) * x3 + (0.8666000000) * x4 + (0.6620000000) * u
    res
  }

}