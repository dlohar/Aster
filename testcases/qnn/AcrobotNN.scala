
import daisy.lang._
import Vector._

object AcrobotNN {

  def nn1(x: Vector): Vector = {
    require(lowerBounds(x, List(-0.1, -0.1, -0.1, -0.1, -0.1, -0.1)) &&
      upperBounds(x, List(0.1, 0.1, 0.1, 0.1, 0.1, 0.1)))

    val weights1 = Matrix(List(
      List(-6.29293382e-01, 2.67541230e-01, 3.26982766e-01,
        3.68597507e-01, 6.10970259e-01, 4.58549917e-01),
      List(-5.68826199e-01, -1.55392990e-01, -1.22105889e-01,
        -2.51315504e-01, -2.16413394e-01, -1.56286791e-01),
      List(-5.82582235e-01, 2.55660355e-01, 1.72092929e-01,
        2.75888383e-01, -4.31743413e-01, -2.48835102e-01),
      List(-4.78596538e-01, 1.28337413e-01, -9.21441391e-02,
        1.39534539e-02, 3.22414190e-02, 2.98796240e-02),
      List(-3.34398925e-01, 7.93269575e-02, -1.64386123e-01,
        1.60010517e-01, -2.35558912e-01, -1.15458876e-01),
      List(-4.76573497e-01, -1.54970177e-02, -1.26784191e-01,
        5.62150264e-03, -4.48317021e-01, -3.52748903e-03),
      List(-1.43754631e-02, 3.44424248e-01, -1.08262575e+00,
        2.39211872e-01, -4.74438906e-01, -9.14749876e-02),
      List(-4.55911428e-01, 6.12583682e-02, -2.26583347e-01,
        -2.54084796e-01, 7.09139567e-04, -8.48601758e-02),
      List(3.17283839e-01, -1.58517390e-01, 3.50333401e-03,
        -1.75980598e-01, -3.18112463e-01, -8.64015743e-02),
      List(-1.99433178e-01, -3.42387795e-01, -5.81617057e-01,
        -1.70351222e-01,  3.87241602e-01, 3.16810668e-01),
      List(-6.93348274e-02, 1.55286163e-01, -3.27745259e-01,
        -8.59251097e-02, -5.56157410e-01, -2.58438408e-01),
      List(1.98058039e-01, -4.84740853e-01, -2.47723386e-01,
        -2.22351506e-01, -2.11692587e-01, -1.57581761e-01),
      List(1.37195006e-01, 3.39969814e-01, -4.13535506e-01,
        -2.19780236e-01, -2.78608412e-01, -1.92499116e-01),
      List(-1.92286909e-01, -3.83429766e-01, -2.02968061e-01,
        -4.23051804e-01, -1.21225879e-01, -9.73629877e-02),
      List(-1.05304039e+00, 2.23364711e-01, 5.30629456e-01,
        2.31110826e-01, 5.80791235e-01, 5.40907025e-01)))

    val weights2 = Matrix(List(
      List(-5.68912148e-01, -2.45529413e-02, -2.25604221e-01,
        3.59802127e-01, -6.07256889e-02, -3.81070852e-01,
        1.70765501e-02, -2.82357156e-01, -1.62701711e-01,
        -3.74989450e-01, 4.49668407e-01, -4.20878291e-01,
        -5.85381687e-01, -3.04477394e-01, 2.35509381e-01),
      List(-1.20397083e-01, -4.34645921e-01, 2.82601058e-01,
        4.65441883e-01, -2.10522547e-01, 5.73813543e-02,
        -3.38673413e-01, -3.27726662e-01, -3.56248677e-01,
        -9.07136127e-02, 3.96773480e-02, -2.42602617e-01,
        3.20055932e-02, 2.25141168e-01, 1.58115998e-01),
      List(-3.57161134e-01, -1.28013894e-01, -9.74777117e-02,
        8.56095180e-02, 2.68486530e-01, 2.94723749e-01,
        -5.87876514e-02, -4.61421371e-01, -4.09108959e-02,
        -1.96083054e-01, -2.97103733e-01, -1.38230652e-01,
        -1.52158113e-02, -6.07206747e-02, -4.83650059e-01),
      List(-5.07248938e-01, -3.35070640e-01, 1.09696716e-01,
        -1.93877995e-01, 3.65468234e-01, -1.31055191e-01,
        -2.19359234e-01, 2.12498352e-01, 3.43544818e-02,
        4.84136939e-02, 3.33550334e-01, 2.12501943e-01,
        -3.34746420e-01, -1.70579836e-01, -1.80601731e-01),
      List(-4.99056131e-02, -3.32706332e-01, -4.55245614e-01,
        -3.04004073e-01, -2.52780557e-01, -7.30358437e-02,
        9.76401344e-02, -1.14749134e-01, -1.21306874e-01,
        8.10830519e-02, -3.80616069e-01, -3.65194261e-01,
        -4.74418476e-02,  3.20089638e-01, -4.23902869e-01),
      List(-2.82976419e-01, -2.48756990e-01, 3.73733908e-01,
        -1.90239370e-01, -1.64255634e-01, -2.00147957e-01,
        -5.33612911e-05, -3.66094261e-01, -4.20340478e-01,
        3.20099562e-01, 2.82023013e-01, -1.87795579e-01,
        4.51123327e-01, -1.75517038e-01, -4.69483644e-01),
      List(-4.51597005e-01, -1.41896680e-01, -9.52668041e-02,
        1.34978816e-02, -7.29397535e-01, -1.44612372e-01,
        1.19672440e-01, -1.19669296e-01, -5.18921614e-01,
        1.73369721e-02, -2.15244871e-02, -9.48787630e-02,
        -1.62601709e-01, -2.99442206e-02, -4.18656915e-01),
      List(-1.64978474e-01, 3.01610172e-01, 4.49634865e-02,
        -3.52940202e-01, 2.52749175e-01, -2.22563028e-01,
        -2.90309489e-01, 3.43492299e-01, -5.20854592e-01,
        -3.12793463e-01, -1.92056179e-01, -6.92713857e-02,
        1.19807571e-01, 2.48242002e-02, 1.63227141e-01),
      List(1.90981627e-01, 6.43129349e-02, -3.29196692e-01,
        1.18765399e-01, 3.77256930e-01, 2.11454183e-01,
        1.88693538e-01, -3.95772338e-01, 1.07955620e-01,
        1.23433374e-01, 1.22706123e-01, 1.42289568e-02,
        -1.63164437e-02, -8.38840206e-04, -2.20267817e-01),
      List(-2.88934052e-01, -2.99438834e-01, -3.93457413e-01,
        -1.37356147e-01, -3.97342235e-01, -2.03161724e-02,
        -2.86976725e-01, -1.79779768e-01, 1.84301645e-01,
        -1.87489733e-01, 2.24629030e-01, -6.95818424e-01,
        1.67788804e-01, -2.69089013e-01, -3.85266989e-01),
      List(-4.42503780e-01, -6.33238912e-01, -1.47343457e-01,
        -2.71628082e-01, -1.75806612e-01, -2.52429038e-01,
        -2.11986721e-01, -1.91730767e-01, -3.90366107e-01,
        -2.89141059e-01, 1.37168825e-01, -1.57242805e-01,
        1.13857262e-01, -2.44222611e-01, -9.55179930e-01),
      List(-1.51628911e-01, 1.26476362e-01, -1.23569623e-01,
        1.02147028e-01, 9.47182253e-02, 1.41238257e-01,
        -6.11776292e-01, -2.13759109e-01, -4.63662446e-01,
        -3.41865569e-02, 2.56761938e-01, -4.94219720e-01,
        9.42234248e-02, 4.43219543e-02, 1.34396613e-01),
      List(-3.02538753e-01, 2.94740736e-01, 6.69614896e-02,
        2.32604221e-01, -1.26742244e-01, -2.83270955e-01,
        2.13426664e-01, -1.02681488e-01, -7.73385614e-02,
        -5.70077300e-02, -4.53232318e-01, -4.87006277e-01,
        -1.96999647e-02, 6.28331080e-02, -2.08373740e-02),
      List(-2.01316878e-01, -2.05204133e-02, 1.61532566e-01,
        -4.84607629e-02, 2.70292580e-01, -1.18401252e-01,
        -7.85330907e-02, -2.54102439e-01, -1.49111941e-01,
        -2.69630402e-02, -4.28298533e-01, -3.24924082e-01,
        2.02089146e-01, 1.30651653e-01, -7.91379511e-02),
      List(-1.85248643e-01, 1.82871789e-01, -2.33104363e-01,
        -1.69683471e-01, -3.16307425e-01, -1.26408175e-01,
        4.28302027e-02, 2.31543422e-01, -3.36505353e-01,
        -8.43682215e-02, -9.69281346e-02, -5.71092069e-01,
        -1.40888885e-01, 3.13218921e-01, 6.89420104e-02)))

    val weights3 = Matrix(List(
      List(2.29563445e-01,  1.04949370e-01, -4.59014714e-01,
        1.95766576e-02, -1.36528194e-01, -4.57856685e-01,
        -2.68932134e-01, -5.27595103e-01, -1.89240515e-01,
        -4.33640748e-01, -1.64254025e-01, -1.34603634e-01,
        -4.00546014e-01, 1.76497623e-02, -2.13468805e-01),
      List(-2.33471572e-01, 1.31314054e-01, 3.66877695e-03,
        -4.78864200e-02, -3.35377753e-01, 1.57063201e-01,
        -2.70694476e-02, -4.06695992e-01, 2.43175715e-01,
        -3.45819205e-01, -1.80475637e-02, 1.26686543e-02,
        -4.94696140e-01, -6.71166868e-04, 1.60829663e-01),
      List(3.52051184e-02,  4.17473502e-02, 2.32657447e-01,
        2.25572333e-01, -2.42649782e-02, -1.85954329e-02,
        1.01007439e-01, 1.22162573e-01, -8.83611560e-01,
        -4.91617739e-01, 1.02315463e-01, 2.11482152e-01,
        -5.80346771e-03, 9.39330384e-02, 2.52326399e-01)))

    val bias1 = Vector(List(0.11953659, -0.23018855, -0.23079194, -0.27972525,
      -0.40995833, -0.49942672, -0.49265984, -0.54850829, -0.29379722,
      -0.29907602, -0.38252938, -0.200213, -0.31963122, -0.23946577, 0.05669439))

    val bias2 = Vector(List(-0.11049539, -0.16315025, -0.0635424,
      -0.24738458, -0.08200371,  0.29637107, -0.00476448, -0.15643454,
      0.85825741, -0.11829416, -0.07634179, -0.14015025, 0.0453058,
      -0.25159332, -0.09033348))

    val bias3 = Vector(List(-0.62143272, -0.0067973, -0.19203907))

    val layer1 = relu(weights1 * x + bias1)
    val layer2 = relu(weights2 * layer1 + bias2)
    val layer3 = linear(weights3 * layer2 + bias3)

    layer3

  } ensuring(res => res +/- 1e-3)
  // ensuring(res => res +/- 1e-5)
}
